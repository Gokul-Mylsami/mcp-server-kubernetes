name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch: 
    inputs:
      force-run:
        description: 'Force run the workflow'
        required: false
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Set up Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker
          minikube status
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          
      - name: Configure kubectl for both proxy and direct access
        run: |
          # Create a backup of the original kubeconfig
          cp ~/.kube/config ~/.kube/config.backup
          
          # Start the proxy in background for most operations
          kubectl proxy --port=8080 &
          echo "KUBECTL_PROXY_PID=$!" >> $GITHUB_ENV
          
          # Give the proxy a moment to start
          sleep 3
          
          # Create a kubeconfig context that uses the proxy for most operations
          kubectl config set-cluster minikube-proxy --server=http://localhost:8080 --insecure-skip-tls-verify=true
          kubectl config set-context minikube-proxy --cluster=minikube-proxy --user=minikube
          
          # For kubectl cp operations, we'll need to temporarily switch back to direct connection
          # The original minikube context will be used for cp operations
          
          # Set the proxy context as default for most operations
          kubectl config use-context minikube-proxy
          
          # Verify the proxy works
          kubectl get nodes

      - name: Run tests with mixed kubeconfig approach
        env:
          # Set partial K8s config to trigger fallback scenarios
          K8S_SERVER: "http://localhost:8080"
          # K8S_TOKEN intentionally not set to test fallback
          KUBECONFIG_DIRECT: "$HOME/.kube/config.backup"
          KUBECONFIG_PROXY: "$HOME/.kube/config"
        run: |
          # Run tests with both default and JUnit reporters
          bun run test --reporter default --reporter junit --outputFile junit-results.xml

      - name: Test Report
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Bun Tests
          path: junit-results.xml
          reporter: jest-junit
          fail-on-error: true

      - name: Verify build works
        run: bun run build

      - name: Clean up kubectl proxy
        if: always()
        run: |
          if [ -n "$KUBECTL_PROXY_PID" ]; then
            echo "Stopping kubectl proxy (PID: $KUBECTL_PROXY_PID)"
            kill $KUBECTL_PROXY_PID || true
          fi